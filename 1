import time
import pandas as pd
import talib
from bitget.rest_api import MarketApi, OrderApi
from bitget.exceptions import BitgetAPIException
from config import BITGET_API_KEY, BITGET_API_SECRET, BITGET_API_PASSWORD

# Initialize API clients
market_api = MarketApi(BITGET_API_KEY, BITGET_API_SECRET, BITGET_API_PASSWORD)
order_api = OrderApi(BITGET_API_KEY, BITGET_API_SECRET, BITGET_API_PASSWORD)

# Function to fetch OHLCV data
def fetch_ohlcv(symbol, interval="1h", limit=100):
    try:
        response = market_api.candles(symbol, interval, limit)
        df = pd.DataFrame(response, columns=["timestamp", "open", "high", "low", "close", "volume"])
        df["close"] = df["close"].astype(float)
        return df
    except BitgetAPIException as e:
        print(f"Error fetching OHLCV: {e.message}")
        return None

# Function to calculate EMA
def calculate_ema(df, short_period=9, long_period=21):
    df["EMA_Short"] = talib.EMA(df["close"], timeperiod=short_period)
    df["EMA_Long"] = talib.EMA(df["close"], timeperiod=long_period)
    return df

# Function to detect EMA crossover signals
def check_ema_crossover(df):
    if df["EMA_Short"].iloc[-2] < df["EMA_Long"].iloc[-2] and df["EMA_Short"].iloc[-1] > df["EMA_Long"].iloc[-1]:
        return "BUY"
    elif df["EMA_Short"].iloc[-2] > df["EMA_Long"].iloc[-2] and df["EMA_Short"].iloc[-1] < df["EMA_Long"].iloc[-1]:
        return "SELL"
    return None

# Function to place order
def place_order(symbol, margin_coin, side, order_type="market", size="0.01"):
    try:
        params = {
            "symbol": symbol,
            "marginCoin": margin_coin,
            "side": side,
            "orderType": order_type,
            "size": size,
            "timeInForceValue": "normal"
        }
        response = order_api.place_order(params)
        print("Order Response:", response)
        return response
    except BitgetAPIException as e:
        print(f"Error placing order: {e.message}")

# Main trading loop
symbol = "BTCUSDT_UMCBL"
margin_coin = "USDT"

while True:
    df = fetch_ohlcv(symbol)
    if df is not None:
        df = calculate_ema(df)
        signal = check_ema_crossover(df)

        if signal == "BUY":
            print("EMA Crossover detected: BUY Signal")
            place_order(symbol, margin_coin, "open_long")

        elif signal == "SELL":
            print("EMA Crossover detected: SELL Signal")
            place_order(symbol, margin_coin, "open_short")

    time.sleep(300)  # Wait 5 minutes before the next check