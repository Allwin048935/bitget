import ccxt
import pandas as pd
import matplotlib.pyplot as plt
import mplfinance as mpf
from io import BytesIO
import asyncio
import nest_asyncio
from telegram import Bot
import config  # Import the config module
import ta  # Import ta library

# Interval and CCXT client setup
interval = '1d'  # Daily candlesticks
bitget = ccxt.bitget({
    'apiKey': config.API_KEY,
    'secret': config.API_SECRET,
    'password': config.API_PASSWORD,  # Bitget requires a passphrase
})

# Dictionaries to track EMA crossover prices and alert dates
ema_crossover_prices = {'long': {}, 'short': {}}  # Store prices at crossover
last_alert_date = {'long': {}, 'short': {}}  # Track last alert date for each condition

# Function to fetch historical data
def get_historical_data(symbol, interval, limit=50):
    ohlcv = bitget.fetch_ohlcv(symbol, interval, limit=limit)
    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    df.set_index('timestamp', inplace=True)
    df.columns = ['Open', 'High', 'Low', 'Close', 'Volume']
    return df

# Function to calculate EMA using the `ta` library
def calculate_ema(df, period):
    return ta.trend.EMAIndicator(df['Close'], window=period).ema_indicator()

# Function to check EMA crossover and update prices
def check_ema_cross(df, symbol, short_period=3, long_period=7):
    df['ema_short'] = calculate_ema(df, short_period)
    df['ema_long'] = calculate_ema(df, long_period)

    cross_over = df['ema_short'].iloc[-1] > df['ema_long'].iloc[-1] and df['ema_short'].iloc[-2] <= df['ema_long'].iloc[-2]
    cross_under = df['ema_short'].iloc[-1] < df['ema_long'].iloc[-1] and df['ema_short'].iloc[-2] >= df['ema_long'].iloc[-2]

    if cross_over:
        ema_crossover_prices['long'][symbol] = df['Close'].iloc[-1]  # Update crossover price
        last_alert_date['long'][symbol] = df.index[-1]  # Update alert date
    elif cross_under:
        ema_crossover_prices['short'][symbol] = df['Close'].iloc[-1]  # Update crossover price
        last_alert_date['short'][symbol] = df.index[-1]  # Update alert date

    return cross_over, cross_under

# Function to calculate percentage change since EMA crossover
def calculate_cumulative_change(symbol, current_price, alert_type):
    if symbol in ema_crossover_prices[alert_type]:
        crossover_price = ema_crossover_prices[alert_type][symbol]
        return ((current_price - crossover_price) / crossover_price) * 100
    return 0

# Function to plot candlesticks with EMA lines
def plot_candles(df, symbol, title):
    mpf_data = df[['Open', 'High', 'Low', 'Close']].copy()
    mc = mpf.make_marketcolors(up='#2fc71e', down='#ed2f1a', inherit=True)
    s = mpf.make_mpf_style(base_mpl_style=['bmh', 'dark_background'], marketcolors=mc, y_on_right=True)

    short_ema = calculate_ema(df, 3)
    long_ema = calculate_ema(df, 7)

    fig, axlist = mpf.plot(
        mpf_data,
        figratio=(10, 6),
        type="candle",
        style=s,
        tight_layout=True,
        datetime_format='%H:%M',
        ylabel="Price ($)",
        addplot=[
            mpf.make_addplot(short_ema, color='cyan', width=1.5, linestyle='-'),
            mpf.make_addplot(long_ema, color='magenta', width=1.5, linestyle='-')
        ],
        returnfig=True
    )

    axlist[0].set_title(f"{symbol} - {title}", fontsize=25, style='italic', fontfamily='sans-serif')
    buf = BytesIO()
    plt.savefig(buf, format='png', bbox_inches='tight')
    buf.seek(0)
    plt.close(fig)
    return buf

# Function to send Telegram message
async def send_telegram_message(symbol, message, image_buffer):
    await telegram_bot.send_message(chat_id=config.CHAT_ID, text=message)
    await telegram_bot.send_photo(chat_id=config.CHAT_ID, photo=image_buffer)

# Main function
async def main():
    while True:
        for symbol in config.SELECTED_SYMBOLS:
            try:
                historical_data = get_historical_data(symbol, interval)
                ema_cross_over, ema_cross_under = check_ema_cross(historical_data, symbol)

                if ema_cross_over:
                    current_price = historical_data['Close'].iloc[-1]
                    cumulative_change = calculate_cumulative_change(symbol, current_price, 'long')
                    message = f'/enter_long {symbol}\nCumulative Change Since EMA Cross: {cumulative_change:.2f}%'
                    title = f'EMA Cross Over for {symbol}'
                    image_buffer = plot_candles(historical_data, symbol, title)
                    await send_telegram_message(symbol, message, image_buffer)

                elif ema_cross_under:
                    current_price = historical_data['Close'].iloc[-1]
                    cumulative_change = calculate_cumulative_change(symbol, current_price, 'short')
                    message = f'/enter_short {symbol}\nCumulative Change Since EMA Cross: {cumulative_change:.2f}%'
                    title = f'EMA Cross Under for {symbol}'
                    image_buffer = plot_candles(historical_data, symbol, title)
                    await send_telegram_message(symbol, message, image_buffer)

            except Exception as e:
                print(f"Error processing {symbol}: {e}")

        await asyncio.sleep(900)  # Sleep for 15 minutes

# Initialize Telegram Bot
telegram_bot = Bot(token=config.TELEGRAM_TOKEN)

# Use nest_asyncio for Jupyter compatibility
nest_asyncio.apply()

# Create and run the event loop
asyncio.run(main())
