import ccxt
import pandas as pd
import asyncio
import nest_asyncio
from telegram import Bot
import config  # Import your configuration module
import ta  # Import ta library

# Interval and CCXT client setup
interval = '1d'  # Daily candlesticks
bitget = ccxt.bitget({
    'apiKey': config.API_KEY,
    'secret': config.API_SECRET,
    'password': config.API_PASSWORD,  # Bitget requires a passphrase
})

# Dictionaries for tracking EMA crossover prices and cumulative changes
ema_crossover_prices = {'long': {}, 'short': {}}
cumulative_changes = {'long': {}, 'short': {}}

# Function to fetch historical data
def get_historical_data(symbol, interval, limit=50):
    ohlcv = bitget.fetch_ohlcv(symbol, interval, limit=limit)
    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    df.set_index('timestamp', inplace=True)
    df.columns = ['Open', 'High', 'Low', 'Close', 'Volume']
    return df

# Function to calculate EMA using the `ta` library
def calculate_ema(df, period):
    return ta.trend.EMAIndicator(df['Close'], window=period).ema_indicator()

# Function to check EMA crossover
def check_ema_cross(df, symbol, short_period=3, long_period=7):
    df['ema_short'] = calculate_ema(df, short_period)
    df['ema_long'] = calculate_ema(df, long_period)

    cross_over = df['ema_short'].iloc[-1] > df['ema_long'].iloc[-1] and df['ema_short'].iloc[-2] <= df['ema_long'].iloc[-2]
    cross_under = df['ema_short'].iloc[-1] < df['ema_long'].iloc[-1] and df['ema_short'].iloc[-2] >= df['ema_long'].iloc[-2]

    if cross_over:
        ema_crossover_prices['long'][symbol] = df['Close'].iloc[-1]
    elif cross_under:
        ema_crossover_prices['short'][symbol] = df['Close'].iloc[-1]

    return cross_over, cross_under

# Function to calculate cumulative percentage change since EMA crossover
def calculate_cumulative_percentage(symbol, alert_type, current_price):
    if symbol in ema_crossover_prices[alert_type]:
        crossover_price = ema_crossover_prices[alert_type][symbol]
        cumulative_change = ((current_price - crossover_price) / crossover_price) * 100
        cumulative_changes[alert_type][symbol] = cumulative_change
        return cumulative_change
    return 0

# Function to send Telegram messages in chunks
async def send_chunked_telegram_message(chat_id, message, chunk_size=4000):
    """Send a long message in chunks to Telegram."""
    for i in range(0, len(message), chunk_size):
        await telegram_bot.send_message(chat_id=chat_id, text=message[i:i+chunk_size])

# Main function
async def main():
    while True:
        cumulative_results = []  # Store cumulative changes for all symbols
        for symbol in config.SELECTED_SYMBOLS:
            try:
                historical_data = get_historical_data(symbol, interval)

                ema_cross_over, ema_cross_under = check_ema_cross(historical_data, symbol)

                current_price = historical_data['Close'].iloc[-1]

                if ema_cross_over:
                    cumulative_long = calculate_cumulative_percentage(symbol, 'long', current_price)
                    cumulative_results.append(f"{symbol} Long: {cumulative_long:.2f}%")

                elif ema_cross_under:
                    cumulative_short = calculate_cumulative_percentage(symbol, 'short', current_price)
                    cumulative_results.append(f"{symbol} Short: {cumulative_short:.2f}%")

            except Exception as e:
                print(f"Error processing {symbol}: {e}")

        # Send aggregated cumulative results via Telegram in chunks
        if cumulative_results:
            aggregated_message = "\n".join(cumulative_results)
            await send_chunked_telegram_message(config.CHAT_ID, f"All Symbols Cumulative Percentages:\n{aggregated_message}")

        await asyncio.sleep(900)  # Sleep for 15 minutes

# Initialize Telegram Bot
telegram_bot = Bot(token=config.TELEGRAM_TOKEN)

# Use nest_asyncio for Jupyter compatibility
nest_asyncio.apply()

# Create and run the event loop
asyncio.run(main())
