import ccxt
import pandas as pd
import time
from config import BITGET_API_KEY, BITGET_API_SECRET, BITGET_API_PASSWORD, symbols, time_interval
from bitget.v1.mix.order_api import OrderApi
from bitget.exceptions import BitgetAPIException

# CCXT client for market data
exchange = ccxt.bitget({
    'apiKey': BITGET_API_KEY,
    'secret': BITGET_API_SECRET,
    'password': BITGET_API_PASSWORD,
    'enableRateLimit': True,
    'options': {
        'defaultType': 'swap',
        'marginMode': 'isolated',
    }
})

# Bitget SDK client for order placement
bitget_order_client = OrderApi(BITGET_API_KEY, BITGET_API_SECRET, BITGET_API_PASSWORD)

# EMA strategy parameters
short_ema_period = 5
long_ema_period = 10
fixed_quantity_usdt = 6

# Track last order types and open orders for each symbol
last_order_types = {symbol: None for symbol in symbols}
open_orders = {symbol: None for symbol in symbols}

# Function to calculate EMA
def calculate_ema(df, period, column='close'):
    return df[column].ewm(span=period, adjust=False).mean()

# Function to fetch OHLCV data (using CCXT)
def fetch_ohlcv(symbol, timeframe, limit):
    try:
        ohlcv = exchange.fetch_ohlcv(symbol, timeframe, limit=limit)
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        df['short_ema'] = calculate_ema(df, short_ema_period)
        df['long_ema'] = calculate_ema(df, long_ema_period)
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        df.set_index('timestamp', inplace=True)
        return df
    except Exception as e:
        print(f"Error fetching OHLCV for {symbol}: {e}")
        return None

# Function to fetch position mode (using CCXT)
def get_position_mode(symbol):
    try:
        positions = exchange.fetch_positions([symbol])
        for pos in positions:
            if pos['symbol'] == symbol:
                return 'one-way' if pos['info'].get('holdMode') == 'single_hold' else 'hedge'
        return 'one-way'
    except Exception as e:
        print(f"Error fetching position mode for {symbol}: {e}")
        return 'one-way'

# Function to place a market order (using Bitget SDK)
def place_market_order(symbol, side, quantity, position_mode='one-way'):
    try:
        bitget_symbol = symbol.replace(':USDT', '_UMCBL')  # e.g., BTCUSDT_UMCBL
        if position_mode == 'one-way':
            trade_side = 'open_long' if side.lower() == 'buy' else 'open_short'
        else:  # hedge mode
            if side.lower() == 'buy':
                trade_side = 'open_long' if last_order_types[symbol] != 'BUY' else 'close_short'
            else:
                trade_side = 'open_short' if last_order_types[symbol] != 'SELL' else 'close_long'

        params = {
            'symbol': bitget_symbol,
            'marginCoin': 'USDT',
            'side': trade_side,
            'orderType': 'market',
            'size': str(exchange.amount_to_precision(symbol, quantity)),
            'clientOid': str(int(time.time() * 1000)),
        }

        print(f"Placing market order for {symbol}: {params}")
        response = bitget_order_client.placeOrder(params)
        print(f"Market {side.capitalize()} Order placed for {symbol}: {response}")
        return response if response['code'] == '00000' else None
    except BitgetAPIException as e:
        print(f"Error placing Market {side.capitalize()} Order for {symbol}: {e.message}")
        return None
    except Exception as e:
        print(f"Unexpected error placing order for {symbol}: {type(e).__name__} - {str(e)}")
        return None

# Function to close an existing position (using Bitget SDK)
def close_existing_position(symbol, position_mode='one-way'):
    try:
        positions = exchange.fetch_positions([symbol])
        for position in positions:
            if position['symbol'] == symbol:
                position_size = float(position.get('contracts', 0) or 0)
                position_side = position.get('side', '').lower()

                if position_size > 0:
                    close_side = 'close_long' if position_side == 'long' else 'close_short'
                    print(f"Closing existing {position_side} position for {symbol} with size {position_size}")
                    bitget_symbol = symbol.replace(':USDT', '_UMCBL')
                    params = {
                        'symbol': bitget_symbol,
                        'marginCoin': 'USDT',
                        'side': close_side,
                        'orderType': 'market',
                        'size': str(position_size),
                        'clientOid': str(int(time.time() * 1000)),
                    }
                    response = bitget_order_client.placeOrder(params)
                    return response['code'] == '00000'
        print(f"No existing position for {symbol} to close")
        return True
    except BitgetAPIException as e:
        print(f"Error closing position for {symbol}: {e.message}")
        return False
    except Exception as e:
        print(f"Unexpected error closing position for {symbol}: {e}")
        return False

# Function to close open orders (using CCXT)
def close_open_orders(symbol):
    try:
        if open_orders[symbol] and 'id' in open_orders[symbol]:
            exchange.cancel_order(open_orders[symbol]['id'], symbol=symbol)
            print(f"Cancelled open order for {symbol}: {open_orders[symbol]['id']}")
            open_orders[symbol] = None
    except Exception as e:
        print(f"Error cancelling open order for {symbol}: {e}")

# Main trading function
def ema_strategy():
    exchange.load_markets()
    print("Available markets:", [s for s in exchange.markets.keys() if 'USDT' in s])

    while True:
        try:
            for symbol in symbols:
                position_mode = get_position_mode(symbol)
                print(f"{symbol} Position Mode: {position_mode}")

                historical_data = fetch_ohlcv(symbol, time_interval, 100)
                if historical_data is None or len(historical_data) < long_ema_period:
                    print(f"Not enough data for {symbol}. Waiting for more data...")
                    continue

                latest_candle = exchange.fetch_ticker(symbol)
                if 'close' not in latest_candle or latest_candle['close'] is None:
                    print(f"Error: Invalid latest candle data for {symbol}")
                    continue

                latest_close = float(latest_candle['close'])
                quantity = fixed_quantity_usdt / latest_close
                print(f"Symbol: {symbol}, Latest Close: {latest_close:.2f}, Quantity: {quantity:.8f}")

                latest_short_ema = historical_data['short_ema'].iloc[-1]
                latest_long_ema = historical_data['long_ema'].iloc[-1]

                if latest_short_ema > latest_long_ema and last_order_types[symbol] != 'BUY':
                    print(f'{symbol} Buy Signal (Crossover)')
                    if last_order_types[symbol] == 'SELL' and not close_existing_position(symbol, position_mode):
                        print(f"Skipping buy order for {symbol} due to close failure")
                        continue
                    close_open_orders(symbol)
                    open_orders[symbol] = place_market_order(symbol, 'buy', quantity, position_mode)
                    if open_orders[symbol]:
                        last_order_types[symbol] = 'BUY'

                elif latest_short_ema < latest_long_ema and last_order_types[symbol] != 'SELL':
                    print(f'{symbol} Sell Signal (Crossunder)')
                    if last_order_types[symbol] == 'BUY' and not close_existing_position(symbol, position_mode):
                        print(f"Skipping sell order for {symbol} due to close failure")
                        continue
                    close_open_orders(symbol)
                    open_orders[symbol] = place_market_order(symbol, 'sell', quantity, position_mode)
                    if open_orders[symbol]:
                        last_order_types[symbol] = 'SELL'

            time.sleep(300)  # Wait 5 minutes
        except Exception as e:
            print(f'An error occurred in main loop: {e}')
            time.sleep(60)

# Run the trading strategy
if __name__ == "__main__":
    ema_strategy()