import ccxt
import pandas as pd
import matplotlib.pyplot as plt
from io import BytesIO
from telegram import Bot, Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
import ta  # Import the ta library for technical analysis
import config  # Import the config module

# Initialize Bitget client
bitget = ccxt.bitget({
    'apiKey': config.API_KEY,
    'secret': config.API_SECRET,
})

# List to store selected symbols
selected_symbols = []

# Get the list of all trading pairs available on Bitget
def get_bitget_symbols():
    markets = bitget.load_markets()
    return list(markets.keys())

# Function to get historical candlestick data
def get_historical_data(symbol, interval, limit=100):
    ohlcv = bitget.fetch_ohlcv(symbol, interval, limit=limit)
    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    df.set_index('timestamp', inplace=True)
    return df

# Function to calculate MACD
def calculate_macd(df, short_period=12, long_period=26, signal_period=9):
    macd = ta.trend.MACD(df['close'], window_slow=long_period, window_fast=short_period, window_sign=signal_period)
    df['macd'] = macd.macd()
    df['signal_line'] = macd.macd_signal()
    return df

# Function to check MACD cross
def check_macd_cross(df):
    df = calculate_macd(df)
    cross_over = df['macd'].iloc[-2] > df['signal_line'].iloc[-2] and df['macd'].iloc[-3] <= df['signal_line'].iloc[-3]
    cross_under = df['macd'].iloc[-2] < df['signal_line'].iloc[-2] and df['macd'].iloc[-3] >= df['signal_line'].iloc[-3]
    return cross_over, cross_under

# Function to plot MACD chart and RSI indicators, then return image buffer
def plot_macd_chart(df, symbol, title):
    df['rsi_14'] = calculate_rsi(df, period=14)
    df['rsi_7'] = calculate_rsi(df, period=7)
    df['rsi_14_ma'] = df['rsi_14'].rolling(window=9).mean()

    fig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(12, 12), gridspec_kw={'height_ratios': [3, 1, 1]})

    # Plot price and MACD chart
    ax1.plot(df.index, df['close'], label='Close Price', color='black')
    ax1.set_title(title)
    ax1.legend()

    # Plot MACD
    ax2.plot(df.index, df['macd'], label='MACD', color='blue')
    ax2.plot(df.index, df['signal_line'], label='Signal Line', color='orange')
    ax2.set_ylabel('MACD')
    ax2.legend()

    # Plot RSI
    ax3.plot(df.index, df['rsi_14'], label='RSI (14)', color='blue')
    ax3.plot(df.index, df['rsi_7'], label='RSI (7)', color='green')
    ax3.axhline(30, linestyle='--', color='red')  # Oversold line
    ax3.axhline(70, linestyle='--', color='green')  # Overbought line
    ax3.set_ylabel('RSI')
    ax3.legend()

    plt.tight_layout()

    # Save plot to a BytesIO object
    buf = BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    plt.close()
    return buf

# Function to send Telegram message and image
async def send_telegram_message(symbol, message, image_buffer=None):
    await application.bot.send_message(chat_id=config.CHAT_ID, text=message)
    if image_buffer:
        await application.bot.send_photo(chat_id=config.CHAT_ID, photo=image_buffer)

# Handler for the /start command
async def start(update: Update, context: CallbackContext):
    await update.message.reply_text('Send me the trading pairs you want to monitor, separated by commas. For example: BTC/USDT, ETH/USDT')

# Handler for receiving trading pairs
async def set_trading_pairs(update: Update, context: CallbackContext):
    global selected_symbols
    pairs = update.message.text.split(',')
    bitget_symbols = get_bitget_symbols()

    # Convert pairs to uppercase and strip whitespace
    new_symbols = [pair.strip().upper() for pair in pairs]

    # Update selected symbols to include both new and existing symbols
    selected_symbols_set = set(selected_symbols)
    new_symbols_set = set(new_symbols)
    selected_symbols_set.update(new_symbols_set)

    # Check if symbols are available on Bitget
    invalid_symbols = [symbol for symbol in selected_symbols_set if symbol not in bitget_symbols]
    valid_symbols = [symbol for symbol in selected_symbols_set if symbol in bitget_symbols]

    if invalid_symbols:
        await update.message.reply_text(f'The following symbols are not available on Bitget: {", ".join(invalid_symbols)}')

    if valid_symbols:
        selected_symbols[:] = valid_symbols
        updated_symbols_message = f'Trading pairs updated to: {", ".join(valid_symbols)}'
        await update.message.reply_text(updated_symbols_message)
        await check_trading_pairs()

# Function to check trading pairs and send alerts if conditions are met
async def check_trading_pairs():
    global selected_symbols
    symbols_to_remove = []
    for symbol in selected_symbols:
        try:
            historical_data = get_historical_data(symbol, interval='4h')
            cross_over, cross_under = check_macd_cross(historical_data)

            if cross_over or cross_under:
                if cross_over:
                    message = f'MACD cross over detected on #{symbol}'
                    title = f'MACD Cross Over for {symbol}'
                else:
                    message = f'MACD cross under detected on #{symbol}'
                    title = f'MACD Cross Under for {symbol}'
                
                image_buffer = plot_macd_chart(historical_data, symbol, title)
                await send_telegram_message(symbol, message, image_buffer)

                symbols_to_remove.append(symbol)

        except Exception as e:
            print(f"Error processing {symbol}: {e}")
    
    selected_symbols = [symbol for symbol in selected_symbols if symbol not in symbols_to_remove]

    if symbols_to_remove:
        updated_symbols_message = f'Updated Symbols after alerts: {", ".join(selected_symbols)}'
        await application.bot.send_message(chat_id=config.CHAT_ID, text=updated_symbols_message)

# Initialize Application for handling Telegram updates
application = Application.builder().token(config.TELEGRAM_TOKEN).build()

# Add handlers
application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, set_trading_pairs))

# Start the Telegram bot
application.run_polling()
