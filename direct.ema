import ccxt
import pandas as pd
import time
from config import BITGET_API_KEY, BITGET_API_SECRET, BITGET_API_PASSWORD, symbols, time_interval

# Initialize Bitget Futures Exchange
exchange = ccxt.bitget({
    'apiKey': BITGET_API_KEY,
    'secret': BITGET_API_SECRET,
    'password': BITGET_API_PASSWORD,
    'enableRateLimit': True,
    'options': {
        'defaultType': 'swap',
        'marginMode': 'isolated',
    }
})

# Strategy Parameters
short_ema_period = 5
long_ema_period = 10
fixed_quantity_usdt = 6  # Order quantity in USDT value

# Track Last Order Type for Each Symbol
last_order_types = {symbol: None for symbol in symbols}

# Convert Symbol Format for Bitget Futures
def format_symbol(symbol):
    return f"{symbol.replace('/', '')}_UMCBL"  # Example: BTC/USDT â†’ BTCUSDT_UMCBL

# Fetch Historical Data & Compute EMA
def fetch_ohlcv(symbol, timeframe, limit=50):
    formatted_symbol = format_symbol(symbol)
    try:
        ohlcv = exchange.fetch_ohlcv(formatted_symbol, timeframe, limit=limit)
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        df['short_ema'] = df['close'].ewm(span=short_ema_period, adjust=False).mean()
        df['long_ema'] = df['close'].ewm(span=long_ema_period, adjust=False).mean()
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        df.set_index('timestamp', inplace=True)
        return df
    except Exception as e:
        print(f"Error fetching OHLCV for {formatted_symbol}: {e}")
        return None

# Place Market Buy Order
def place_market_buy_order(symbol, quantity):
    formatted_symbol = format_symbol(symbol)
    try:
        order = exchange.create_order(
            symbol=formatted_symbol,
            type='market',
            side='buy',
            amount=quantity,
            params={'marginMode': 'isolated'}
        )
        print(f"BUY Order Placed: {formatted_symbol} - {order}")
        return order
    except Exception as e:
        print(f"Error placing BUY order for {formatted_symbol}: {e}")

# Place Market Sell Order
def place_market_sell_order(symbol, quantity):
    formatted_symbol = format_symbol(symbol)
    try:
        order = exchange.create_order(
            symbol=formatted_symbol,
            type='market',
            side='sell',
            amount=quantity,
            params={'marginMode': 'isolated'}
        )
        print(f"SELL Order Placed: {formatted_symbol} - {order}")
        return order
    except Exception as e:
        print(f"Error placing SELL order for {formatted_symbol}: {e}")

# Close Open Positions
def close_open_position(symbol):
    formatted_symbol = format_symbol(symbol)
    try:
        positions = exchange.fetch_positions()
        for position in positions:
            if position['symbol'] == formatted_symbol and float(position['positionAmt']) > 0:
                side = 'sell' if position['side'] == 'long' else 'buy'
                exchange.create_order(
                    formatted_symbol, 'market', side, position['positionAmt'], params={'reduceOnly': True}
                )
                print(f"Closed position for {formatted_symbol}")
    except Exception as e:
        print(f"Error closing position for {formatted_symbol}: {e}")

# Cancel Open Orders
def close_open_orders(symbol):
    formatted_symbol = format_symbol(symbol)
    try:
        orders = exchange.fetch_open_orders(formatted_symbol)
        for order in orders:
            exchange.cancel_order(order['id'], formatted_symbol)
            print(f"Cancelled order {order['id']} for {formatted_symbol}")
    except Exception as e:
        print(f"Error cancelling open orders for {formatted_symbol}: {e}")

# Trading Bot Logic
def trading_bot():
    while True:
        for symbol in symbols:
            df = fetch_ohlcv(symbol, time_interval)
            if df is None or len(df) < 2:
                continue

            last_candle = df.iloc[-1]
            prev_candle = df.iloc[-2]

            # EMA Crossover Logic
            if last_candle['short_ema'] > last_candle['long_ema'] and prev_candle['short_ema'] <= prev_candle['long_ema']:
                if last_order_types[symbol] != 'buy':
                    close_open_orders(symbol)
                    close_open_position(symbol)
                    place_market_buy_order(symbol, fixed_quantity_usdt)
                    last_order_types[symbol] = 'buy'

            elif last_candle['short_ema'] < last_candle['long_ema'] and prev_candle['short_ema'] >= prev_candle['long_ema']:
                if last_order_types[symbol] != 'sell':
                    close_open_orders(symbol)
                    close_open_position(symbol)
                    place_market_sell_order(symbol, fixed_quantity_usdt)
                    last_order_types[symbol] = 'sell'

        time.sleep(60)  # 1-minute interval

# Run the Trading Bot
if __name__ == "__main__":
    trading_bot()