import ccxt
import pandas as pd
import matplotlib.pyplot as plt
import mplfinance as mpf
from io import BytesIO
import asyncio
import nest_asyncio
from telegram import Bot
import config  # Import the config module
import ta  # Import ta library

interval = '1h'  # Adjust to '4h' if you need 4-hour candlesticks

# Initialize Bitget client
bitget = ccxt.bitget({
    'apiKey': config.API_KEY,
    'secret': config.API_SECRET,
    'password': config.API_PASSWORD,  # Bitget requires a passphrase
})

# Dictionary to store the last alert messages for each symbol
last_alert_messages = {}

# Function to get historical candlestick data
def get_historical_data(symbol, interval, limit=50):
    ohlcv = bitget.fetch_ohlcv(symbol, interval, limit=limit)
    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    df.set_index('timestamp', inplace=True)
    df.columns = ['Open', 'High', 'Low', 'Close', 'Volume']
    return df

# Function to calculate EMA using ta library
def calculate_ema(df, period):
    return ta.trend.EMAIndicator(df['Close'], window=period).ema_indicator()

# Function to calculate MACD using ta library
def calculate_macd(df):
    macd = ta.trend.MACD(df['Close'])
    df['macd'] = macd.macd()
    df['signal'] = macd.macd_signal()
    df['histogram'] = macd.macd_diff()

# Function to check MACD and signal line crossover
def check_macd_signal_crossover(df):
    macd_prev = df['macd'].iloc[-3]
    macd_curr = df['macd'].iloc[-2]
    signal_prev = df['signal'].iloc[-3]
    signal_curr = df['signal'].iloc[-2]

    cross_over = macd_prev <= signal_prev and macd_curr > signal_curr
    cross_under = macd_prev >= signal_prev and macd_curr < signal_curr

    return cross_over, cross_under

# Function to plot candlesticks with EMA, MACD, and Signal Lines
def plot_candles(df, symbol, title):
    mpf_data = df[['Open', 'High', 'Low', 'Close']].copy()
    mc = mpf.make_marketcolors(up='#2fc71e', down='#ed2f1a', inherit=True)
    s = mpf.make_mpf_style(base_mpl_style=['bmh', 'dark_background'], marketcolors=mc, y_on_right=True)

    short_ema = calculate_ema(df, 3)
    long_ema = calculate_ema(df, 7)
    calculate_macd(df)

    macd_colors = ['green' if h > 0 else 'red' for h in df['histogram']]

    fig, axlist = mpf.plot(
        mpf_data,
        figratio=(10, 6),
        type="candle",
        style=s,
        tight_layout=True,
        datetime_format='%H:%M',
        ylabel="Price ($)",
        addplot=[
            mpf.make_addplot(short_ema, color='cyan', width=1.5, linestyle='-'),
            mpf.make_addplot(long_ema, color='magenta', width=1.5, linestyle='-'),
            mpf.make_addplot(df['macd'], panel=1, color='blue', width=1.5, ylabel="MACD"),
            mpf.make_addplot(df['signal'], panel=1, color='orange', width=1.5),
            mpf.make_addplot(df['histogram'], type='bar', color=macd_colors, panel=1)
        ],
        returnfig=True
    )

    axlist[0].set_title(f"{symbol} - {title}", fontsize=25, style='italic', fontfamily='sans-serif')

    buf = BytesIO()
    plt.savefig(buf, format='png', bbox_inches='tight')
    buf.seek(0)
    plt.close(fig)

    return buf

# Function to send Telegram message and image
async def send_telegram_message(symbol, message, image_buffer):
    if last_alert_messages.get(symbol) != message:
        await telegram_bot.send_message(chat_id=config.CHAT_ID, text=message)
        await telegram_bot.send_photo(chat_id=config.CHAT_ID, photo=image_buffer)
        last_alert_messages[symbol] = message

# Main function
async def main():
    while True:
        for symbol in config.SELECTED_SYMBOLS:
            try:
                historical_data = get_historical_data(symbol, interval)
                calculate_macd(historical_data)
                cross_over, cross_under = check_macd_signal_crossover(historical_data)

                if cross_over:
                    message = f"/enter_long {symbol}"
                    title = f"MACD Signal Line Cross Over for {symbol}"
                    image_buffer = plot_candles(historical_data, symbol, title)
                    await send_telegram_message(symbol, message, image_buffer)
                elif cross_under:
                    message = f"/enter_short {symbol}"
                    title = f"MACD Signal Line Cross Under for {symbol}"
                    image_buffer = plot_candles(historical_data, symbol, title)
                    await send_telegram_message(symbol, message, image_buffer)
            except Exception as e:
                print(f"Error processing {symbol}: {e}")
        await asyncio.sleep(450)

telegram_bot = Bot(token=config.TELEGRAM_TOKEN_RSI)
nest_asyncio.apply()
asyncio.run(main())