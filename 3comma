import ccxt
import pandas as pd
import asyncio
import requests
from datetime import datetime, timezone
from telegram import Update
from telegram.ext import Application, CommandHandler
import config1
import logging

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialize Bitget client with credentials
try:
    bitget = ccxt.bitget({
        'apiKey': config1.API_KEY,
        'secret': config1.API_SECRET,
        'password': config1.API_PASSPHRASE,  # Required for Bitget authentication
    })
    logger.info("Bitget client initialized successfully.")
except Exception as e:
    logger.error(f"Failed to initialize Bitget client: {e}")
    raise

# Function to get historical candlestick data
def get_historical_data(symbol, interval='1m', limit=20):
    try:
        ohlcv = bitget.fetch_ohlcv(symbol, interval, limit=limit)
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        df.set_index('timestamp', inplace=True)
        return df
    except Exception as e:
        logger.error(f"Error fetching historical data for {symbol}: {e}")
        return pd.DataFrame()

# Function to send a message to 3Commas using a webhook
def send_3commas_message(symbol, action, close_price):
    timestamp = datetime.now(timezone.utc).isoformat()
    payload = {
        "secret": config1.SECRET_1,
        "max_lag": "300",
        "timestamp": timestamp,
        "trigger_price": str(close_price),
        "tv_exchange": "bitget",
        "tv_instrument": symbol + '.P',
        "action": action,
        "bot_uuid": config1.BOT_UUID,
    }

    try:
        url = config1.THREE_COMMAS_WEBHOOK_URL
        response = requests.post(url, json=payload)

        if response.status_code == 200:
            logger.info(f"Successfully sent {action} alert for {symbol}")
        else:
            logger.error(f"Failed to send {action} alert for {symbol}: {response.content}")

    except requests.RequestException as e:
        logger.error(f"Error sending request for {symbol}: {e}")

# Function to handle /enter_long and /enter_short commands
async def handle_alert(update: Update, context) -> None:
    try:
        user_command = update.message.text.strip().lower()
        if user_command.startswith('/enter_long'):
            action = "enter_long"
        elif user_command.startswith('/enter_short'):
            action = "enter_short"
        else:
            await update.message.reply_text("Invalid command. Use /enter_long or /enter_short.")
            return

        command_parts = user_command.split()
        if len(command_parts) != 2:
            await update.message.reply_text("Invalid format. Use: /enter_long BTCUSDT or /enter_short BTCUSDT")
            return

        symbol = command_parts[1].upper()
        if not symbol.endswith('USDT'):
            await update.message.reply_text("Invalid symbol. Only USDT pairs are supported.")
            return

        df = get_historical_data(symbol)
        if not df.empty:
            close_price = df.iloc[-1]['close']
            send_3commas_message(symbol, action, close_price)
            await update.message.reply_text(f"{action} alert sent for {symbol} at price {close_price}")
        else:
            await update.message.reply_text(f"Could not fetch data for {symbol}.")
    except Exception as e:
        logger.error(f"Error in handle_alert: {e}")
        await update.message.reply_text("An error occurred while processing your request.")

# Start Telegram bot
async def start_telegram_bot():
    application = Application.builder().token(config1.TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler('enter_long', handle_alert))
    application.add_handler(CommandHandler('enter_short', handle_alert))

    await application.initialize()
    await application.start()
    await application.updater.start_polling()
    logger.info("Telegram bot started. Waiting for commands...")
    await asyncio.Event().wait()  # Keeps the bot running

# Main function to run the Telegram bot
async def main():
    try:
        await start_telegram_bot()
    except Exception as e:
        logger.error(f"Error in main: {e}")

if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()

    asyncio.run(main())
