# Function to handle /enter_long, /enter_short, /exit_long, and /exit_short commands
async def handle_alert(update: Update, context) -> None:
    try:
        user_command = update.message.text.strip().lower()
        
        # Determine the action based on the command
        if user_command.startswith('/enter_long'):
            action = "enter_long"
        elif user_command.startswith('/enter_short'):
            action = "enter_short"
        elif user_command.startswith('/exit_long'):
            action = "exit_long"
        elif user_command.startswith('/exit_short'):
            action = "exit_short"
        else:
            await update.message.reply_text("Invalid command. Use /enter_long, /enter_short, /exit_long, or /exit_short.")
            return

        # Parse the command to extract the symbol
        command_parts = user_command.split()
        if len(command_parts) != 2:
            await update.message.reply_text(f"Invalid format. Use: /{action} BTCUSDT")
            return

        symbol = command_parts[1].upper()
        if not symbol.endswith('USDT'):
            await update.message.reply_text("Invalid symbol. Only USDT pairs are supported.")
            return

        # Fetch historical data for the symbol
        df = get_historical_data(symbol)
        if not df.empty:
            close_price = df.iloc[-1]['close']
            send_3commas_message(symbol, action, close_price)
            await update.message.reply_text(f"{action} alert sent for {symbol} at price {close_price}")
        else:
            await update.message.reply_text(f"Could not fetch data for {symbol}.")
    except Exception as e:
        logger.error(f"Error in handle_alert: {e}")
        await update.message.reply_text("An error occurred while processing your request.")

# Start Telegram bot
async def start_telegram_bot():
    application = Application.builder().token(config1.TELEGRAM_TOKEN).build()

    # Add handlers for all commands
    application.add_handler(CommandHandler('enter_long', handle_alert))
    application.add_handler(CommandHandler('enter_short', handle_alert))
    application.add_handler(CommandHandler('exit_long', handle_alert))
    application.add_handler(CommandHandler('exit_short', handle_alert))

    await application.initialize()
    await application.start()
    await application.updater.start_polling()
    logger.info("Telegram bot started. Waiting for commands...")
    await asyncio.Event().wait()  # Keeps the bot running

# Main function to run the Telegram bot
async def main():
    try:
        await start_telegram_bot()
    except Exception as e:
        logger.error(f"Error in main: {e}")

if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()

    asyncio.run(main())
